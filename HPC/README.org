#+TITLE: Installing GNU Guix on the Octopus HPC Cluster

* Table of Contents                                                     :TOC:
 - [[#philosophy][Philosophy]]
 - [[#basic-layout][Basic layout]]
   - [[#head-nodes][Head nodes]]
   - [[#compute-nodes][Compute nodes]]
   - [[#distributed-storage][Distributed storage]]
 - [[#bootstrapping][Bootstrapping]]
   - [[#getting-the-machines-up-and-running][Getting the machines up and running]]

* Philosophy

Having run GNU Guix on our machines for some years with great results
we decided to build a new HPC cluster consisting of Dell PowerEdge
R6515 machines with AMD EPYC 7402P 24-Core Processor on board. Two
machines (the head nodes) have 1TB RAM and the other 9 machines have
128GB RAM on board.

Because we own the cluster with admin rights we can deploy software as
we see fit. The nodes can boot from an on demand image. We'll allow
for Docker, Singularity and even VMs to run. Researchers will use our
cluster and we want to give them freedom.

To bootstrap the installation we use remote terminal access (serial
over LAN by iDRAC) and boot into a system using a Debian10 live USB
stick. Next we start the network and install Debian10 on the hard
disks with debootstrap as a base install. We need to get up to speed
quickly and this is the fastest route. In time we may have GNU Guix
images which may allow us to skip a Debian install. The design of the
system will allow for foreign Docker images and VMs which means the
underlying system can be very lean. A suitable target for GNU Guix.

Initially the base system will be a Debian install hosting shared GNU
Guix software packages. We will migrate to a full GNU Guix setup.

* Basic layout

** Head nodes

We have two head nodes (octopus01 and octopus02) which are pretty
identical though octopus01 will be the main head node and octopus02 is
the fallback. These machines are large memory machines and we will
allow people to run VMs on these - separate from slurm.

** Compute nodes

We have nine compute nodes (octopus03-11). Initially we simply create
Debian nodes running Slurm. The nodes will get on demand boot of other
installations including GNU Guix.

** Distributed storage

The machines are connected over 10Gbs and we are opting for a software
distributed storage system between all machines.

* Bootstrapping

** Getting the machines up and running

We use remote out-of-band access using a serial interface over LAN
connecting with ssh. E.g.

: ssh idrac@hostname

First thing is to check serial settings

#+begin_example
racadm>>get iDRAC.Serial
[Key=iDRAC.Embedded.1#Serial.1]
BaudRate=57600
Command=
Enable=Enabled
HistorySize=8192
IdleTimeout=300
NoAuth=Disabled

set IDRAC.serial.BaudRate 115200
#+end_example

You could set user and password, but leave that for now.  Connect to
serial interface (com2 even though we are using ttyS0 throughout)

: racadm>>connect com2

Probably a blank, to leave serial type control-backslash or ~^\~
and reboot

: racadm>>serveraction powercycle
: connect com2

Hit ~ESC+!~ and ENTER a few times and wait. What we want to do is select
a USB boot drive. ~ESC+!~ equals F11 which selects the bootmanager. It
will pop up in 30s or 2min (on a large RAM machine).

Until we have PXE network and images we are going to manage installs
via USB mounts. On the boot menu make a note of the service tag:

: Service Tag: C5R6R53           PowerEdge R6515

And select ~One-shot BIOS Boot Menu~. Choose ~USB 2: U3 Cruzer Micro~
which has a Debian10 live rescue system with serial access
enabled. You don't see the select menu, but you need to press [ENTER]
a few times. Login and you see we also have network and you can log in
via ssh.

: ip a

At this stage we can use debootstrap to start installing the machine.

*** Partition disks

Partition the first drive. You can model it on Octopus01, but
essentially you are free to do what you want ;). EFI 500Mb, a small
SWAP space 8GB, and a Linux partition 16GB is about minimal. The rest
of these drives should be part of the distributed store.

cfdisk /dev/sda
delete partitions
partition 1, 500Mb, EFI (ef)
partition 2, 8G, swap (82)
partition 3, 16G, Linux (83)
mark partition 3 bootable
write and quit

We need to install dosfstools in order to format the EFI partition.

#+begin_src sh
apt install dosfstools
mkfs.fat /dev/sda1
mkswap /dev/sda2
mkfs.ext4 /dev/sda3
#+end_src

Then we can mount the partitions in our custom directory, as we would
expect them to be mounted once the system is booted.

#+begin_src sh
mkdir /target
mount /dev/sda3 /target
mkdir -p /target/boot/efi
mount /dev/sda1 /target/boot/efi
#:end_src

*** Debootstrap

: debootstrap --include=openssh-server buster /target http://deb.debian.org/debian/

(may take a while)

Make sure the partition is bootable (with fdisk), and

  #+begin_src sh
  mount -t proc none /target/proc
  mount -o bind /dev /target/dev
  mount -t sysfs sys /target/sys
  env LANG=C.UTF-8 chroot /target /bin/bash
  #+end_src

Set locales to include en_US.UTF-8 and install a coupld of useful
packages. Etckeeper helps keep /etc in version control so changes
are easy to see later.

  #+begin_src sh
  apt install locales
  dpkg-reconfigure locales
  apt install vim less etckeeper screen tmux
  passwd   # set root password, don't forget!
  #+end_src

edit /etc/fstab

#+begin_src fstab
  /dev/sda3       /       ext4    errors=remount-ro       0 1
  /dev/sda1       /boot/efi   vfat    defaults        0 0
  /dev/sda2       none    swap    sw      0 0

  # IF YOU TYPO HERE AND NEED TO FIX IT AFTER BOOTING INTO IT:
  #mount -o remount,rw / --options-source=disable
#+end_src

Edit the hostname

  : echo "OctopusXX" > /etc/hostname

edit /etc/apt/sources.list and make sure the package lists are up to date

#+begin_src sh
deb http://deb.debian.org/debian buster main contrib non-free
deb http://security.debian.org/ buster/updates main contrib non-free
#+end_src

  : apt update

Install kernel and headers (missing in target normally!)

#+begin_src sh
apt-cache search linux-image
apt install linux-image-amd64 linux-source
apt install firmware-linux-free grub2
#+end_src

Edit ~/etc/default/grub~ to give serial access and symlink and enable
~getty@tty1.service -> /lib/systemd/system/getty@.service~

: ln -s /lib/systemd/system/getty\@.service /etc/systemd/system/getty@tty1.service

Check the OS

: cat /etc/os-release
: PRETTY_NAME="Debian GNU/Linux 10 (buster)"

Make a note of the existing grub menu entries

In ~/etc/default/grub~:

#+begin_src sh
GRUB_CMDLINE_LINUX_DEFAULT="console=tty1 console=ttyS0,115200n8"
GRUB_CMDLINE_LINUX="console=tty1 console=ttyS0,115200n8"
GRUB_SERIAL_COMMAND="serial --speed=115200 --unit=1 --word=8 --parity=no --stop=1"
GRUB_TERMINAL="console serial"
#+end_src

And update grub

  : update-grub2

and enable serial in systemd

#+BEGIN_SRC
systemctl enable serial-getty@ttyS0.service
systemctl start serial-getty@ttyS0.service
#+END_SRC

or run

: ln -s /lib/systemd/system/getty\@.service /etc/systemd/system/getty@tty1.service

Check grub menu in ~/boot/grub/grub.conf~ to make sure the serial
connection is also set to display the grub console. It may not have been set!

Setup /etc/network/interfaces to include lo and eno

#+begin_src sh
# The loopback network interface
auto lo
iface lo inet loopback

# The primary network interface
allow-hotplug eno1
iface eno1 inet dhcp
#+end_src

Now you are ready to reboot the machine and boot into the installed system.
#+begin_src sh
sync && reboot
#:end_src
